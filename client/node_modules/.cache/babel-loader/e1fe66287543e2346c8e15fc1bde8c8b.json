{"ast":null,"code":"var _jsxFileName = \"/home/jerald/Documents/playGround/Javascript/todo-app2/src/components/Accessibility/mouse-pointerEvents.js\";\nimport React, { Component } from 'react';\n\nclass OuterClickExample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.toggleContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener('click', this.onClickOutsideHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.onClickOutsideHandler);\n  }\n\n  onClickHandler() {\n    this.setState(currentState => ({\n      isOpen: !currentState.isOpen\n    }));\n  }\n\n  onClickOutsideHandler(event) {\n    if (this.state.isOpen && !this.toggleContainer.current.contains(event.target)) {\n      this.setState({\n        isOpen: false\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.toggleContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.onClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Select an option\"), this.state.isOpen && React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Option 1\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Option 2\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Option 3\")));\n  }\n\n}\n\nexport default OuterClickExample;","map":{"version":3,"sources":["/home/jerald/Documents/playGround/Javascript/todo-app2/src/components/Accessibility/mouse-pointerEvents.js"],"names":["React","Component","OuterClickExample","constructor","props","state","isOpen","toggleContainer","createRef","componentDidMount","window","addEventListener","onClickOutsideHandler","componentWillUnmount","removeEventListener","onClickHandler","setState","currentState","event","current","contains","target","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,iBAAN,SAAgCD,SAAhC,CAA0C;AACxCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAb;AACA,SAAKC,eAAL,GAAuBP,KAAK,CAACQ,SAAN,EAAvB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,KAAKC,qBAAtC;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBH,IAAAA,MAAM,CAACI,mBAAP,CAA2B,OAA3B,EAAoC,KAAKF,qBAAzC;AACD;;AAEDG,EAAAA,cAAc,GAAG;AACf,SAAKC,QAAL,CAAcC,YAAY,KAAK;AAC7BX,MAAAA,MAAM,EAAE,CAACW,YAAY,CAACX;AADO,KAAL,CAA1B;AAGD;;AAEDM,EAAAA,qBAAqB,CAACM,KAAD,EAAQ;AAC3B,QAAI,KAAKb,KAAL,CAAWC,MAAX,IAAqB,CAAC,KAAKC,eAAL,CAAqBY,OAArB,CAA6BC,QAA7B,CAAsCF,KAAK,CAACG,MAA5C,CAA1B,EAA+E;AAC7E,WAAKL,QAAL,CAAc;AAAEV,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD;AACF;;AAEDgB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,GAAG,EAAE,KAAKf,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKQ,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEG,KAAKV,KAAL,CAAWC,MAAX,IACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CAHJ,CADF;AAYD;;AAzCuC;;AA4C1C,eAAeJ,iBAAf","sourcesContent":["import React, {Component} from 'react';\n\nclass OuterClickExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false};\n    this.toggleContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener('click', this.onClickOutsideHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.onClickOutsideHandler);\n  }\n\n  onClickHandler() {\n    this.setState(currentState => ({\n      isOpen: !currentState.isOpen\n    }));\n  }\n\n  onClickOutsideHandler(event) {\n    if (this.state.isOpen && !this.toggleContainer.current.contains(event.target)) {\n      this.setState({ isOpen: false });\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.toggleContainer}>\n        <button onClick={this.onClickHandler}>Select an option</button>\n        {this.state.isOpen && (\n          <ul>\n            <li>Option 1</li>\n            <li>Option 2</li>\n            <li>Option 3</li>\n          </ul>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default OuterClickExample;"]},"metadata":{},"sourceType":"module"}